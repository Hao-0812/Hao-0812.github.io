<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hao-0812</title>
  <icon>https://www.gravatar.com/avatar/0eede8fcb36c2ec19d42066f90465913</icon>
  <subtitle>个人博客</subtitle>
  <link href="https://example.com/atom.xml" rel="self"/>
  
  <link href="https://example.com/"/>
  <updated>2024-03-08T09:23:59.607Z</updated>
  <id>https://example.com/</id>
  
  <author>
    <name>hao zhong</name>
    <email>17384790449@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>macroeconomy</title>
    <link href="https://example.com/2024/03/08/macroeconomy/"/>
    <id>https://example.com/2024/03/08/macroeconomy/</id>
    <published>2024-03-08T08:52:14.000Z</published>
    <updated>2024-03-08T09:23:59.607Z</updated>
    
    <content type="html"><![CDATA[<h3 id="宏观经济局势"><a href="#宏观经济局势" class="headerlink" title="宏观经济局势"></a>宏观经济局势</h3><p><strong>CPI</strong>：即居民消费价格指数，是政府用来衡量通货膨胀的一个数据，是一个反映城乡居民家庭一般所购买的消费商品和服务价格水平变动情况的宏观经济指标。对宏观经济政策的选择、调整和节奏把握上具有重要的指标作用。</p><p><strong>CPI就是市场上的货物价格增长百分比。</strong>一般市场经济国家认为CPI在2-3%属于可接受范围内，当然还要看其他数据。<strong>一般说来当CPI&gt;3%的增幅时我们称为就是通货膨胀。</strong> </p><p><strong>而当CPI&gt;5%的增幅时，就是严重的通货膨胀。</strong> </p><p><strong>PPI</strong>：生产者物价指数,PPI是衡量工业企业产品出厂价格变动趋势和变动程度的指数，是反映某一时期生产领域价格变动情况的重要经济指标，也是制定有关经济政策和国民经济核算的重要依据。 </p><p><strong>PPI的大幅上涨，将加大企业采购成本，在原材料价格上涨不能有效转嫁给消费者的前提下，企业利润减少甚至亏损都将是很常见的。</strong> </p><p><strong>CPI上涨和PPI上涨，</strong>意味着通货膨胀上升，经济增速加快，如果上涨幅度过大，会导致高通胀，进而使得经济衰退。<br><strong>CPI下跌和PPI下跌，</strong>意味着经济发展放缓，如果下跌幅度过大，会导致通货紧缩，经济陷入衰退<br><strong>CPI上涨和PPI下跌</strong>，意味着企业利润增大，经济将进入一个扩张期。<br><strong>CPI下跌和PPI上涨</strong>，意味着企业利润减少，经济有衰退的危险。</p><p><strong>杠杆率</strong> </p><p>杠杆率是指权益资本与资产负债表中总资产的比率，杠杆率是衡量公司负债风险的指标，从侧面反映出公司的还款能力。杠杆率的倒数是杠杆倍数，杠杆倍数越高，越容易受到收益率和贷款利率的影响。杠杆是一把双刃剑，当企业盈利时，增加杠杆能扩大盈利，但是加的过多，风险就会上升。因此高杠杆带来收益的同时也放大了风险。</p><p><strong>「同比」</strong> </p><p>与历史「同时期］比较，例如2011年3月份与2010年3月份相比，叫「同比」。</p><p><strong>「环比」</strong> </p><p>与「上一个」统计周期比较，例如2011年4月份与2011年3月份相比较，称为「环比」。</p><p>现阶段我国货币供应量划分为以下三个层次：</p><p>M0 －－流通中的现金</p><p>M1 －－ M0 ＋企业单位活期存款＋机关团体部队存款＋农村存款 ;</p><p>M2 －－ M1 ＋企业单位定期存款＋自筹基本建设存款＋个人储蓄存款＋其他存款。</p><p>M1 是狭义货币供应量， M2 是广义货币供应量； M1 与 M2 之差是准货币。</p><p>租金回报率&#x3D;（月租金-物业费）* 12 &#x2F; 房屋总价</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;宏观经济局势&quot;&gt;&lt;a href=&quot;#宏观经济局势&quot; class=&quot;headerlink&quot; title=&quot;宏观经济局势&quot;&gt;&lt;/a&gt;宏观经济局势&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;CPI&lt;/strong&gt;：即居民消费价格指数，是政府用来衡量通货膨胀的一个数据，是一个反映城</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Linux基础</title>
    <link href="https://example.com/2024/03/06/Linux%E5%9F%BA%E7%A1%80/"/>
    <id>https://example.com/2024/03/06/Linux%E5%9F%BA%E7%A1%80/</id>
    <published>2024-03-06T07:31:04.000Z</published>
    <updated>2024-03-06T13:23:16.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">runlevel<span class="comment">#查看系统运行级</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">tty</span><span class="comment">#查看虚拟控制台编号</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">man [命令名]<span class="comment">#打开bash手册 （man man）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">pwd</span><span class="comment">#查看当前工作目录</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">which</span> [命令名]<span class="comment">#查看命令所在文件夹（只显示外部命令）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">type</span>  [命令名]<span class="comment">#查看命令所在文件夹（选项 -a 可以显示外部命令和内建命令）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file [文件名/目录名]<span class="comment">#查看文件或目录类型</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">du</span> -sh ./* <span class="comment">#查看当前文件夹各文件占用内存大小</span></span></span><br></pre></td></tr></table></figure><h2 id="SHELL命令"><a href="#SHELL命令" class="headerlink" title="SHELL命令"></a>SHELL命令</h2><h3 id="bash-shell-文件系统"><a href="#bash-shell-文件系统" class="headerlink" title="bash shell - 文件系统"></a>bash shell - 文件系统</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> <span class="comment">#创建目录</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">touch</span><span class="comment">#创建指定文件，并以当前用户名作为该文件属主，还可以改变文件修改时间，但不改变文件内容</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> [文件名] [文件名或目录名]<span class="comment">#复制文件，若为文件名，会将源文件复制为一个新目标，最好加上选项 -i 询问是否覆盖已有文件名</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> -R [目录名] [新目录名]<span class="comment">#复制目录，包括目录中所有内容</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ln</span> -s[源文件名] [链接文件名]<span class="comment">#符号链接（软链接）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ln</span> [源文件名] [链接文件名]<span class="comment">#硬链接（不能跨文件系统）</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mv</span> [-i]<span class="comment">#移动文件/目录,或者重命名文件/目录</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rm</span> [-i]<span class="comment">#移除文件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">rm</span> [-r]<span class="comment">#移除目录</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> [-n / -b]<span class="comment">#查看文件，-n加上行号显示，-b对文本行加行号显示</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">more [文件名]<span class="comment">#查看文件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">less [文件名]<span class="comment">#查看文件（less is more）</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">tail</span> [-n 12]  <span class="comment">#查看文件最后12行 或者直接： tail -12</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">tail</span> [-nf 5]  <span class="comment">#实时查看文件最后5行</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">head</span> [-9]  <span class="comment">#查看文件前9行</span></span></span><br></pre></td></tr></table></figure><h3 id="bash-shell-进程管理"><a href="#bash-shell-进程管理" class="headerlink" title="bash shell - 进程管理"></a>bash shell - 进程管理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps -e<span class="comment">#显示所有进程</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps -f<span class="comment">#显示完整格式的输出</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps -j<span class="comment">#显示作业信息</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps -l <span class="comment">#显示长列表</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps r<span class="comment">#仅显示运行中的进程</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">jobs</span>  <span class="comment">#同上  选项 [-l] 显示PID号</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps l<span class="comment">#显示长列表</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ps --forest<span class="comment">#显示父子进程间的嵌套关系</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">top<span class="comment">#实时监测进程  -&gt; 键入f排序  键入d修改轮间隔  键入q退出</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">kill</span> [进程号]  <span class="comment">#终止进程</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pkill[进程名/进程号]    <span class="comment">#终止进程</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mount [-t] [设备文件名]<span class="comment">#挂载设备</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">umount [设备文件名]<span class="comment">#卸载设备</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">df</span> [-h]<span class="comment">#查看挂载磁盘使用情况</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">du</span> [-h]<span class="comment">#显示特定(默认当前)目录下磁盘使用情况  -c 显示所有已列出文件总大小  -s 输出每个参数的汇总信息</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">du</span> -sh | <span class="built_in">sort</span> -hr <span class="comment">#查看当前磁盘使用情况汇总</span></span></span><br></pre></td></tr></table></figure><h3 id="bash-shell-处理数据文件"><a href="#bash-shell-处理数据文件" class="headerlink" title="bash shell - 处理数据文件"></a>bash shell - 处理数据文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sort</span> [-n/-M]<span class="comment">#不加选项默认以首字母排序  -n 按数值大小排序  -M 按三字符月份排序</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">匹配字符</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep [options] pattern [file]<span class="comment">#查找指定文件中部分的某处数据行</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep t filename<span class="comment">#匹配t字符的文本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -v t filename<span class="comment">#显示不匹配t字符的文本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -n t filename<span class="comment">#匹配t字符的文本带行号显示</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -c t filename<span class="comment">#输出匹配t字符的行数</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep [tf] filename<span class="comment">#匹配t字符或者f字符的文本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">grep -e t -e f filename<span class="comment">#同上</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">数据压缩归档</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gzip [filename]<span class="comment">#压缩文件为filename.gz</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gunzip [filename.gz]<span class="comment">#解压缩文件filename.gz</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar <span class="keyword">function</span> [options] object1 object2 ...<span class="comment">#归档指定文件或目录</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar -cvf test.tar test1/ test2/<span class="comment">#将test1和test2创建新的归档文件test.tar</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar -xvf test.tar<span class="comment">#提取test.tar归档中的文件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar -zxvf test.tgz<span class="comment">#提取test.tgz归档中的文件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar -tf test.tar<span class="comment">#列出test.tar归档中的文件（不提取）</span></span></span><br></pre></td></tr></table></figure><h3 id="Shell-shell进程"><a href="#Shell-shell进程" class="headerlink" title="Shell - shell进程"></a>Shell - shell进程</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">常用Shell: bash dash tcsh zsh csh</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">默认交互式shell: default interactive shell  -&gt; 登录shell</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">默认系统shell: default system shell</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$0</span><span class="comment">#显示当前使用的shell名称</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$BASH_SUBSHELL</span><span class="comment">#显示是否创建子shell，若返回0则没有创建子进程，若大于等于1创建了子进程</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">dash<span class="comment">#启动dash shell</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">exit</span><span class="comment">#退出当前shell</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">多命令分隔</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">pwd</span> ; <span class="built_in">cd</span>.. ; <span class="built_in">ls</span> -l ; <span class="built_in">pwd</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进程列表</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">(<span class="built_in">pwd</span> ; <span class="built_in">cd</span>.. ; <span class="built_in">ls</span> -l ; <span class="built_in">pwd</span>)<span class="comment">#会创建子shell（命令分组的一种）</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">后台模式</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sleep</span> 300 &amp;<span class="comment">#在命令末尾加字符 &amp; 会进入后台模式，用jobs -l可以看到运行的进程</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">协程</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">coproc <span class="built_in">sleep</span> 10<span class="comment">#1.在后台生成子shell 2.在该子shell中执行命令</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">coproc MY_jobs &#123; <span class="built_in">sleep</span> 10; &#125;<span class="comment">#指定协程名执行命令，注意花括号内的空格不可省略</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">历史记录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">history</span></span>  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">history</span> -a<span class="comment">#强制将命令历史记录写入.bash_history文件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">!!<span class="comment">#唤回上次命令</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">!42<span class="comment">#唤回history中编号42的命令</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">别名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">alias</span> -p<span class="comment">#查看当前可用别名</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">alias</span> newcommand = <span class="string">&#x27;oldcommand&#x27;</span><span class="comment">#新建别名</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">unalias</span> newcommand<span class="comment">#移除别名</span></span></span><br></pre></td></tr></table></figure><h2 id="Linux环境变量"><a href="#Linux环境变量" class="headerlink" title="Linux环境变量"></a>Linux环境变量</h2><h3 id="全局环境变量"><a href="#全局环境变量" class="headerlink" title="全局环境变量"></a>全局环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看全局变量</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">printenv</span>  或者  $ <span class="built_in">env</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">printenv</span> HOME</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="variable">$HOME</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> <span class="variable">$HOME</span></span></span><br></pre></td></tr></table></figure><h3 id="局部环境变量"><a href="#局部环境变量" class="headerlink" title="局部环境变量"></a>局部环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">局部环境</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h2 id="标准通配符"><a href="#标准通配符" class="headerlink" title="标准通配符"></a>标准通配符</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?  代表任意单个字符</span><br><span class="line">*  代表零个或多个字符</span><br><span class="line">[ay] 代表a或者y字符</span><br><span class="line">[!a] 代表排除a字符</span><br></pre></td></tr></table></figure><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">切换虚拟控制台编号ctal + Alt + F1~F6</span><br><span class="line">命令行上翻页Shift + PAGE up</span><br><span class="line">命令行下翻页Shift + PAGE down</span><br></pre></td></tr></table></figure><h2 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h2><p>VFSvirtual file system虚拟文件系统</p><p>GNUGNU’s Not UnixGNU组织</p><p>OSSopen source software开源软件</p><p>KDEK desktop environmentK桌面环境</p><p>GNOMEGNU network object model environmentGNU网络对象模型环境</p><p>IDE集成开发环境</p><p>CLIcommand line interface命令行界面</p><p>POSIXportable operating system interface可以直接操作系统接口</p><p>FHSfilesystem hierarchy standard文件系统层级标准</p><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/#虚拟目录的根目录</span><br><span class="line">/bin#二进制文件目录，存放用户级GNU实用工具</span><br><span class="line">/boot#引导目录，存放引导文件</span><br><span class="line">/dev#设备目录，Linux在其中创建设备节点</span><br><span class="line">/etc#系统配置文件目录</span><br><span class="line">/home#主目录，Linux在其中创建用户目录（可选）</span><br><span class="line">/lib#库目录，存放系统和应用程序的库文件</span><br><span class="line">/libname#替代库目录 （可选）</span><br><span class="line">/media#媒介目录，可移动存储设备的常用挂载点</span><br><span class="line">/mnt#挂载目录，用于临时挂载文件系统的常用挂载点</span><br><span class="line">/opt#可选目录，存放第三方软件包</span><br><span class="line">/proc#进程目录，存放现有内核、系统以及进程的相关信息</span><br><span class="line">/root#root用户的主目录（可选）</span><br><span class="line">/run#运行目录，存放系统的运行时数据</span><br><span class="line">/sbin#系统二进制文件目录，存放管理级的GNU实用工具</span><br><span class="line">/srv#服务目录，存放本地服务的相关文件</span><br><span class="line">/sys#系统目录，存放设备、驱动程序以及部分内核特性信息</span><br><span class="line">/tmp#临时目录，可以在其中创建和删除临时工作文件</span><br><span class="line">/usr#用户目录，一个次目录级结构（secondary directory hierarchy）</span><br><span class="line">/var#可变目录，存放经常变化的文件，日志文件等</span><br></pre></td></tr></table></figure><p>假设你有一个标量函数 $f(x_1, x_2, \ldots, x_n)$，其中 $x_1, x_2, \ldots, x_n$ 是自变量。函数 $f$ 的梯度向量为 $\nabla f &#x3D; \left(\frac{\partial f}{\partial x_1}, \frac{\partial f}{\partial x_2}, \ldots, \frac{\partial f}{\partial x_n}\right)$。</p><p>要计算梯度向量的模长，即标量函数的梯度的模，可以按照以下步骤进行：</p><ol><li>计算每个自变量的偏导数 $\frac{\partial f}{\partial x_i}$。</li><li>将每个偏导数的平方相加：$\left(\frac{\partial f}{\partial x_1}\right)^2 + \left(\frac{\partial f}{\partial x_2}\right)^2 + \ldots + \left(\frac{\partial f}{\partial x_n}\right)^2$。</li><li>对上述和进行开方运算：$\sqrt{\left(\frac{\partial f}{\partial x_1}\right)^2 + \left(\frac{\partial f}{\partial x_2}\right)^2 + \ldots + \left(\frac{\partial f}{\partial x_n}\right)^2}$。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux&quot;&gt;&lt;a href=&quot;#Linux&quot; class=&quot;headerlink&quot; title=&quot;Linux&quot;&gt;&lt;/a&gt;Linux&lt;/h1&gt;&lt;h2 id=&quot;查看命令&quot;&gt;&lt;a href=&quot;#查看命令&quot; class=&quot;headerlink&quot; title=&quot;查看命令&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Makefile基础</title>
    <link href="https://example.com/2024/03/06/Makefile%E5%9F%BA%E7%A1%80/"/>
    <id>https://example.com/2024/03/06/Makefile%E5%9F%BA%E7%A1%80/</id>
    <published>2024-03-06T07:30:55.000Z</published>
    <updated>2024-03-06T07:31:31.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h1><h2 id="1-安装MinGW-并添加环境变量"><a href="#1-安装MinGW-并添加环境变量" class="headerlink" title="1.安装MinGW 并添加环境变量"></a>1.安装MinGW 并添加环境变量</h2><h2 id="2-makefile结构"><a href="#2-makefile结构" class="headerlink" title="2.makefile结构"></a>2.makefile结构</h2><p>makefile 基本结构：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#目标：依赖</span></span><br><span class="line"><span class="comment">#命令</span></span><br></pre></td></tr></table></figure><p>注释：#</p><p>通配符函数：wildcard</p><p>更改名字函数：patsubst</p><p>变量：$(objectname)</p><p>目标相同名字：$@</p><p>依赖相同名字：$^</p><p>依赖相同名字按顺序：$&lt;</p><p>自动匹配名字:  %</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#目标：依赖</span><br><span class="line">#命令   ###注意命令前是制表符</span><br><span class="line"></span><br><span class="line">main:main.o</span><br><span class="line">g++ main.o -o main</span><br><span class="line">main.o:main.cpp</span><br><span class="line">g++ -c main.cpp -o main.o</span><br><span class="line"></span><br><span class="line">clean:</span><br><span class="line">del *.o</span><br></pre></td></tr></table></figure><h2 id="3-makefile编写"><a href="#3-makefile编写" class="headerlink" title="3.makefile编写"></a>3.makefile编写</h2><ul><li>相同目录</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#变量</span></span><br><span class="line">cc=g++</span><br><span class="line">src=<span class="variable">$(<span class="built_in">wildcard</span> *.cpp)</span></span><br><span class="line">obj=<span class="variable">$(<span class="built_in">patsubst</span> %.cpp,%.o,$(<span class="built_in">notdir</span> <span class="variable">$(src)</span>)</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#程序</span></span><br><span class="line"><span class="section">main:<span class="variable">$(obj)</span></span></span><br><span class="line"><span class="variable">$(cc)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">%.o:%.cpp</span></span><br><span class="line"><span class="variable">$(cc)</span>-c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">del *.o</span><br></pre></td></tr></table></figure><ul><li>不同目录</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#目录</span></span><br><span class="line">BIN_DIR=./bin</span><br><span class="line">SRC_DIR=./src</span><br><span class="line">OBJ_DIR=./obj</span><br><span class="line">INC_DIR=./<span class="keyword">include</span></span><br><span class="line"><span class="comment">#变量</span></span><br><span class="line">SRC=<span class="variable">$(<span class="built_in">wildcard</span> <span class="variable">$(SRC_DIR)</span>/*.cpp)</span></span><br><span class="line">OBJ=<span class="variable">$(<span class="built_in">patsubst</span> %.cpp,<span class="variable">$(OBJ_DIR)</span>/%.o,$(<span class="built_in">notdir</span> <span class="variable">$(SRC)</span>)</span>)</span><br><span class="line"></span><br><span class="line">CC=g++ -O3 -Wall</span><br><span class="line">CFLAG=-I <span class="variable">$(INC_DIR)</span></span><br><span class="line">TARGET=main</span><br><span class="line"></span><br><span class="line"><span class="comment">#程序</span></span><br><span class="line"><span class="variable">$(BIN_DIR)</span>/<span class="variable">$(TARGET)</span>:<span class="variable">$(OBJ)</span></span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="variable">$(OBJ_DIR)</span>/%.o:<span class="variable">$(SRC_DIR)</span>/%.cpp</span><br><span class="line"><span class="variable">$(CC)</span> <span class="variable">$(CFLAG)</span> -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">del obj</span><br></pre></td></tr></table></figure><ul><li>示例：</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">CCFLAGS = $&#123;CFLAG&#125;</span><br><span class="line">cc = g++</span><br><span class="line">buildFolder=./build/</span><br><span class="line">prom = <span class="variable">$(buildFolder)</span>a.exe</span><br><span class="line"></span><br><span class="line">deps = <span class="variable">$(<span class="built_in">wildcard</span> *.h)</span></span><br><span class="line">src = <span class="variable">$(<span class="built_in">wildcard</span> *.cpp)</span></span><br><span class="line">obj = <span class="variable">$(<span class="built_in">patsubst</span> %.cpp, <span class="variable">$(buildFolder)</span>%.o, <span class="variable">$(src)</span>)</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">header_path = -I .</span><br><span class="line">CCFLAGS += -Wall </span><br><span class="line"></span><br><span class="line"><span class="variable">$(prom)</span>: <span class="variable">$(obj)</span></span><br><span class="line"><span class="variable">$(cc)</span> $&#123;CCFLAGS&#125; -o <span class="variable">$(prom)</span> <span class="variable">$(obj)</span> <span class="variable">$(header_path)</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$(buildFolder)</span>%.o: %.cpp <span class="variable">$(deps)</span></span><br><span class="line"><span class="variable">$(cc)</span> $&#123;CCFLAGS&#125; -c <span class="variable">$&lt;</span> -o <span class="variable">$@</span> <span class="variable">$(header_path)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: clean</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf <span class="variable">$(obj)</span> <span class="variable">$(prom)</span></span><br></pre></td></tr></table></figure><h2 id="初步认识Makefile"><a href="#初步认识Makefile" class="headerlink" title="初步认识Makefile"></a>初步认识Makefile</h2><p>GCC和G++的作用：</p><ol><li>预处理</li><li>编译</li><li>汇编</li><li>生成可执行文件</li></ol><p>makefile的作用</p><ol><li>在相同目录时</li><li>在不同目录时</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gcc -o code code.cpp</span><br><span class="line">gcc code.cpp -o code</span><br><span class="line">g++ -I ../header *.c -o code  测试不同路径下的编译</span><br><span class="line"></span><br><span class="line">gcc -E code.cpp  预处理</span><br><span class="line">gcc -S code.cpp  汇编 +: -o name.s</span><br><span class="line">gcc -c code.cpp  编译 +: -o name.o</span><br><span class="line">gcc code.o       链接 默认输出a.exe文件</span><br></pre></td></tr></table></figure><p>CMD:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cls</span> 清屏</span><br><span class="line"><span class="built_in">del</span> *.o 删除所有.o后缀文件</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Makefile&quot;&gt;&lt;a href=&quot;#Makefile&quot; class=&quot;headerlink&quot; title=&quot;Makefile&quot;&gt;&lt;/a&gt;Makefile&lt;/h1&gt;&lt;h2 id=&quot;1-安装MinGW-并添加环境变量&quot;&gt;&lt;a href=&quot;#1-安装MinGW-并添</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>VTK基础</title>
    <link href="https://example.com/2024/03/06/VTK%E5%9F%BA%E7%A1%80/"/>
    <id>https://example.com/2024/03/06/VTK%E5%9F%BA%E7%A1%80/</id>
    <published>2024-03-06T07:30:42.000Z</published>
    <updated>2024-03-06T07:31:42.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VTK可视化管线："><a href="#VTK可视化管线：" class="headerlink" title="VTK可视化管线："></a>VTK可视化管线：</h2><img src="C:\Users\26096\AppData\Roaming\Typora\typora-user-images\image-20230317153056766.png" alt="image-20230317153056766" style="zoom: 80%;" /><h2 id="管线"><a href="#管线" class="headerlink" title="管线"></a>管线</h2><p>1.数据源 source</p><p>2.过滤器 filter （可不加filter）</p><p>3.映射器 mapper</p><p>4.角色 actor</p><p>5.渲染器 renderer</p><p>6.渲染窗口</p><p><img src="C:\Users\26096\AppData\Roaming\Typora\typora-user-images\image-20230317154125291.png" alt="image-20230317154125291"></p><h2 id="生成数据源"><a href="#生成数据源" class="headerlink" title="生成数据源"></a>生成数据源</h2><img src="C:\Users\26096\AppData\Roaming\Typora\typora-user-images\image-20230317153248435.png" alt="image-20230317153248435" style="zoom:50%;" /><h2 id="VTK数据类型："><a href="#VTK数据类型：" class="headerlink" title="VTK数据类型："></a>VTK数据类型：</h2><ul><li><p><strong>vtkPolyData</strong> </p></li><li><p><strong>vtkImageData</strong></p></li></ul><img src="C:\Users\26096\AppData\Roaming\Typora\typora-user-images\image-20230318135016648.png" alt="image-20230318135016648" style="zoom: 67%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkAutoInit.h&gt;</span></span></span><br><span class="line"><span class="built_in">VTK_MODULE_INIT</span>(vtkRenderingOpenGL2);</span><br><span class="line"><span class="built_in">VTK_MODULE_INIT</span>(vtkInteractionStyle);</span><br><span class="line"><span class="comment">//PATH=E:\appSource\LIB_VTK_IO\bin</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vtkConeSource.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vtkPolyDataMapper.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vtkRenderWindow.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vtkRenderWindowInteractor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vtkCamera.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vtkActor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vtkRenderer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vtkCommand.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vtkBoxWidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vtkTransform.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vtkInteractorStyleTrackballCamera.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//vtkXML</span></span><br><span class="line"><span class="comment">//#include &lt;vtkAutoInit.h&gt;</span></span><br><span class="line"><span class="comment">//VTK_MODULE_INIT(vtkRenderingOpenGL2);</span></span><br><span class="line"><span class="comment">//VTK_MODULE_INIT(vtkInteractionStyle);</span></span><br><span class="line"><span class="comment">//PATH=E:\appSource\LIB_VTK_IO\bin</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkCellArray.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkNew.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkPoints.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkStructuredGrid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkXMLStructuredGridWriter.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//read header</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vtkSTLReader.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//data read and write </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vtkPointData.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vtkContourFilter.h&quot;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M1 = <span class="number">200</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N1 = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_VKT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">double</span>(*x)[N1] = <span class="keyword">new</span> <span class="type">double</span>[M1][N1];</span><br><span class="line"><span class="built_in">double</span>(*y)[N1] = <span class="keyword">new</span> <span class="type">double</span>[M1][N1];</span><br><span class="line"><span class="built_in">double</span>(*z)[N1] = <span class="keyword">new</span> <span class="type">double</span>[M1][N1];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span>[] x,y,z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">vtkMyCallback</span> : <span class="keyword">public</span> vtkCommand</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">static</span> vtkMyCallback* <span class="title">New</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> vtkMyCallback;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Execute</span><span class="params">(vtkObject* caller, <span class="type">unsigned</span> <span class="type">long</span>, <span class="type">void</span>*)</span> VTK_OVERRIDE</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vtkTransform* t = vtkTransform::<span class="built_in">New</span>();</span><br><span class="line">vtkBoxWidget* widget = <span class="built_in">reinterpret_cast</span>&lt;vtkBoxWidget*&gt;(caller);</span><br><span class="line">widget-&gt;<span class="built_in">GetTransform</span>(t);</span><br><span class="line">widget-&gt;<span class="built_in">GetProp3D</span>()-&gt;<span class="built_in">SetUserTransform</span>(t);</span><br><span class="line">t-&gt;<span class="built_in">Delete</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">vtkConeSource* cone = vtkConeSource::<span class="built_in">New</span>();</span><br><span class="line">cone-&gt;<span class="built_in">SetHeight</span>(<span class="number">3.0</span>);</span><br><span class="line">cone-&gt;<span class="built_in">SetRadius</span>(<span class="number">1.0</span>);</span><br><span class="line">cone-&gt;<span class="built_in">SetResolution</span>(<span class="number">10</span>);</span><br><span class="line">vtkPolyDataMapper* coneMapper = vtkPolyDataMapper::<span class="built_in">New</span>();</span><br><span class="line">coneMapper-&gt;<span class="built_in">SetInputConnection</span>(cone-&gt;<span class="built_in">GetOutputPort</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vtkActor* coneActor = vtkActor::<span class="built_in">New</span>();</span><br><span class="line">coneActor-&gt;<span class="built_in">SetMapper</span>(coneMapper);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vtkRenderer* ren1 = vtkRenderer::<span class="built_in">New</span>();</span><br><span class="line">ren1-&gt;<span class="built_in">AddActor</span>(coneActor);</span><br><span class="line">ren1-&gt;<span class="built_in">SetBackground</span>(<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.4</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vtkRenderWindow* renWin = vtkRenderWindow::<span class="built_in">New</span>();</span><br><span class="line">renWin-&gt;<span class="built_in">AddRenderer</span>(ren1);</span><br><span class="line">renWin-&gt;<span class="built_in">SetSize</span>(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vtkRenderWindowInteractor* iren = vtkRenderWindowInteractor::<span class="built_in">New</span>();</span><br><span class="line">iren-&gt;<span class="built_in">SetRenderWindow</span>(renWin);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">vtkInteractorStyleTrackballCamera* style =</span><br><span class="line">vtkInteractorStyleTrackballCamera::<span class="built_in">New</span>();</span><br><span class="line">iren-&gt;<span class="built_in">SetInteractorStyle</span>(style);</span><br><span class="line"></span><br><span class="line">vtkBoxWidget* boxWidget = vtkBoxWidget::<span class="built_in">New</span>();</span><br><span class="line">boxWidget-&gt;<span class="built_in">SetInteractor</span>(iren);</span><br><span class="line">boxWidget-&gt;<span class="built_in">SetPlaceFactor</span>(<span class="number">1.25</span>);</span><br><span class="line">boxWidget-&gt;<span class="built_in">SetProp3D</span>(coneActor);</span><br><span class="line">boxWidget-&gt;<span class="built_in">PlaceWidget</span>();</span><br><span class="line">vtkMyCallback* callback = vtkMyCallback::<span class="built_in">New</span>();</span><br><span class="line">boxWidget-&gt;<span class="built_in">AddObserver</span>(vtkCommand::InteractionEvent, callback);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">boxWidget-&gt;<span class="built_in">On</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iren-&gt;<span class="built_in">Initialize</span>();</span><br><span class="line">iren-&gt;<span class="built_in">Start</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cone-&gt;<span class="built_in">Delete</span>();</span><br><span class="line">coneMapper-&gt;<span class="built_in">Delete</span>();</span><br><span class="line">coneActor-&gt;<span class="built_in">Delete</span>();</span><br><span class="line">callback-&gt;<span class="built_in">Delete</span>();</span><br><span class="line">boxWidget-&gt;<span class="built_in">Delete</span>();</span><br><span class="line">ren1-&gt;<span class="built_in">Delete</span>();</span><br><span class="line">renWin-&gt;<span class="built_in">Delete</span>();</span><br><span class="line">iren-&gt;<span class="built_in">Delete</span>();</span><br><span class="line">style-&gt;<span class="built_in">Delete</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include &lt;vtkAutoInit.h&gt;</span></span><br><span class="line"><span class="comment">//VTK_MODULE_INIT(vtkRenderingOpenGL2);</span></span><br><span class="line"><span class="comment">//VTK_MODULE_INIT(vtkInteractionStyle);</span></span><br><span class="line"><span class="comment">//PATH=E:\appSource\LIB_VTK_IO\bin</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkCellArray.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkNew.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkPoints.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkStructuredGrid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vtkXMLStructuredGridWriter.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeData</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">double</span> t;</span><br><span class="line">vtkNew&lt;vtkStructuredGrid&gt; structeredGrid;</span><br><span class="line">vtkNew&lt;vtkPoints&gt; points;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span>, <span class="type">char</span>* [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// Create a grid</span></span><br><span class="line">vtkNew&lt;vtkStructuredGrid&gt; structuredGrid;</span><br><span class="line"></span><br><span class="line">vtkNew&lt;vtkPoints&gt; points;</span><br><span class="line"></span><br><span class="line">points-&gt;<span class="built_in">InsertNextPoint</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">points-&gt;<span class="built_in">InsertNextPoint</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">points-&gt;<span class="built_in">InsertNextPoint</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">points-&gt;<span class="built_in">InsertNextPoint</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">points-&gt;<span class="built_in">InsertNextPoint</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">points-&gt;<span class="built_in">InsertNextPoint</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Specify the dimensions of the grid</span></span><br><span class="line">structuredGrid-&gt;<span class="built_in">SetDimensions</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">structuredGrid-&gt;<span class="built_in">SetPoints</span>(points);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write file</span></span><br><span class="line">vtkNew&lt;vtkXMLStructuredGridWriter&gt; writer;</span><br><span class="line">writer-&gt;<span class="built_in">SetFileName</span>(<span class="string">&quot;output.vts&quot;</span>);</span><br><span class="line">writer-&gt;<span class="built_in">SetInputData</span>(structuredGrid);</span><br><span class="line">writer-&gt;<span class="built_in">Write</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;VTK可视化管线：&quot;&gt;&lt;a href=&quot;#VTK可视化管线：&quot; class=&quot;headerlink&quot; title=&quot;VTK可视化管线：&quot;&gt;&lt;/a&gt;VTK可视化管线：&lt;/h2&gt;&lt;img src=&quot;C:&#92;Users&#92;26096&#92;AppData&#92;Roaming&#92;Typo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CMake基础</title>
    <link href="https://example.com/2024/03/06/CMake%E5%9F%BA%E7%A1%80/"/>
    <id>https://example.com/2024/03/06/CMake%E5%9F%BA%E7%A1%80/</id>
    <published>2024-03-06T07:24:18.000Z</published>
    <updated>2024-03-06T07:25:01.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1-重要指令及常用变量"><a href="#1-1-重要指令及常用变量" class="headerlink" title="1.1 重要指令及常用变量"></a>1.1 重要指令及常用变量</h2><h3 id="1-1-1-重要指令"><a href="#1-1-1-重要指令" class="headerlink" title="1.1.1 重要指令"></a>1.1.1 重要指令</h3><ul><li><strong>&#x3D;&#x3D;cmake_minimum_required&#x3D;&#x3D; - 指定CMake最小版本要求</strong></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMake最小版本要求为2.8.3</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">2.8</span>.<span class="number">3</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>&#x3D;&#x3D;project&#x3D;&#x3D; - 定义工程名称，并可指定工程支持语言</strong></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定工程名为HELLO_CMake 并指定C++ C Python 语言</span></span><br><span class="line"><span class="keyword">project</span>(HELLO_CMake [C++] [C] [Python])</span><br><span class="line"><span class="keyword">project</span>(HELLO_CMake)</span><br></pre></td></tr></table></figure><ul><li><strong>&#x3D;&#x3D;set&#x3D;&#x3D; - 显式的定义变量</strong></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义SRC变量，其值为 main.cpp hello.cpp</span></span><br><span class="line"><span class="keyword">set</span>(SRC main.cpp hello,cpp)</span><br></pre></td></tr></table></figure><ul><li><strong>&#x3D;&#x3D;include_directories&#x3D;&#x3D; - 向工程添加多个特定的头文件搜索路径（相当于指定g++编译器的 -I 参数）</strong></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将/usr/include/myinclude 和 ./include 添加到头文件搜索路径</span></span><br><span class="line">incldue_directories(/usr/<span class="keyword">include</span>/myinclude ./<span class="keyword">include</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>&#x3D;&#x3D;link_directories&#x3D;&#x3D; - 向工程添加多个特定的库文件搜索路径（相当于指定g++编译器的 -L 参数）</strong></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将/usr/lib/mylib 和 ./lib 添加到库文件搜索路径</span></span><br><span class="line"><span class="keyword">link_directories</span>(/usr/lib/mylib ./lib)</span><br></pre></td></tr></table></figure><ul><li><strong>&#x3D;&#x3D;add_library&#x3D;&#x3D; - 生成库文件</strong></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过变量 SRC 生成 hellolib.so 共享库</span></span><br><span class="line"><span class="comment"># SHARED-动态库 STATIC-静态库 </span></span><br><span class="line">addlibrary(hellolib SHARED <span class="variable">$&#123;SRC&#125;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>&#x3D;&#x3D;add_compile_options&#x3D;&#x3D; - 添加编译参数</strong></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加编译参数 -Wall -std=c++11 -o2</span></span><br><span class="line"><span class="keyword">add_compile_options</span>(-Wall -std=c++<span class="number">11</span> -o2)</span><br></pre></td></tr></table></figure><ul><li><strong>&#x3D;&#x3D;add_executable&#x3D;&#x3D; - 生成可执行文件</strong></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译 main.cpp 生成可执行文件 main</span></span><br><span class="line"><span class="keyword">add_executable</span>(main main.cpp)</span><br></pre></td></tr></table></figure><ul><li><strong>&#x3D;&#x3D;target_link_libraries&#x3D;&#x3D; - 为 target 添加需要链接的共享库（相当于指定g++编译器 -I 参数）</strong></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 hellolib 动态库文件链接到可执行文件 main</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(main hellolib)</span><br></pre></td></tr></table></figure><ul><li><strong>&#x3D;&#x3D;add_subdirectory&#x3D;&#x3D; - 向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置</strong></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 src 子目录， src 中需要有一个CMakeLists.txt</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(src)</span><br></pre></td></tr></table></figure><ul><li><strong>&#x3D;&#x3D;aux_source_directory&#x3D;&#x3D; - 发现一个目录下所有的源代码文件并将列表存储在一个变量中，这个指令临时被用来自动构建源文件列表</strong></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义 SRC 变量，其值为当前目录下所有源代码文件</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. SRC)</span><br><span class="line"><span class="comment"># 编译 SRC 变量所代表的源代码文件，生成 main 可执行文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(main <span class="variable">$&#123;SRC&#125;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-1-2-CMake常用变量"><a href="#1-1-2-CMake常用变量" class="headerlink" title="1.1.2 CMake常用变量"></a>1.1.2 CMake常用变量</h3><ul><li><strong>&#x3D;&#x3D;CMAKE_C_FLAGS&#x3D;&#x3D;  gcc编译选项</strong> </li><li><strong>&#x3D;&#x3D;CMAKE_CXX_FLAGS&#x3D;&#x3D;  g++编译选项</strong></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在CMAKE_CXX_FLAGS编译选项后追加 -std=c++11</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;$&#123;CMAKE_CXX_FLAGS&#125; -std=c++11&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><strong>&#x3D;&#x3D;CMAKE_BUILD_TYPE&#x3D;&#x3D;  编译类型（Debug，Release）</strong></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定编译类型为debug，调试时需要选择debug</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE Debug)</span><br><span class="line"><span class="comment"># 指定编译类型为release，发布时需要选择release</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE Release)</span><br></pre></td></tr></table></figure><ul><li><strong>CMAKE_C_COMPILER  指定C编译器</strong>  </li><li>**CMAKE_CXX_COMPILER 指定C++编译器 ** </li><li>**EXECUTABLE_OUTPUT_PATH  可执行文件输出的存放路径 ** </li><li><strong>LIBRARY_OUTPUT_PATH  库文件输出的存放路径</strong></li></ul><h2 id="1-2-CMake编译工程"><a href="#1-2-CMake编译工程" class="headerlink" title="1.2 CMake编译工程"></a>1.2 CMake编译工程</h2><p>CMake目录结果：项目主目录下存在一个CMakeLists.txt文件</p><p><strong>两种方式编译子目录规则：</strong> </p><ol><li>包含源文件的子文件夹<strong>包含</strong>CMakeLists.txt文件，主目录通过add_subdirectory添加子目录</li><li>包含源文件的子文件夹<strong>不包含</strong>CMakeLists.txt文件，子目录编译规则在主目录的CMakeLists.txt中体现</li></ol><p><strong>&#x3D;&#x3D;编译流程：&#x3D;&#x3D;</strong> </p><p>在Linux平台使用CMake构建C&#x2F;C++工程的流程：</p><ul><li>编写 <code>CMakeLists.txt</code> 文件</li><li>执行命令 <code>cmake PATH</code> 生成Makefile</li><li>执行命令 <code>make</code> 进行编译</li></ul><p><strong>外部构建（out_of_source build）:</strong> </p><p>将编译输出的文件与源文件放到不同目录中</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 外部构建</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.在当前目录下创建build文件夹</span></span><br><span class="line">mkdir build</span><br><span class="line"><span class="comment"># 2.进入到build文件夹</span></span><br><span class="line">cd build</span><br><span class="line"><span class="comment"># 3.编译上级目录的CMakeLists.txt，生成Makefile和其他文件</span></span><br><span class="line">cmake ..</span><br><span class="line"><span class="comment"># 4.执行make命令，生成target</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment">## test</span></span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..  <span class="comment"># cmake .. -G &quot;Unix Makefiles&quot;</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line">rm -r build</span><br></pre></td></tr></table></figure><p><strong>&#x3D;&#x3D;CMakeLists.txt 文件&#x3D;&#x3D;</strong> </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_COMPILER <span class="string">&quot;g++&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;-std=c++11 -O3&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE <span class="string">&quot;Debug&quot;</span>) <span class="comment"># Debug Release</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)<span class="comment"># 可执行文件位置 命令行输入：cmake --build .</span></span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)<span class="comment"># 生成库文件位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(cmaketest)</span><br><span class="line"><span class="keyword">add_executable</span>(cmaketest main.cpp teacher.cpp student.cpp) </span><br></pre></td></tr></table></figure><p><strong>&#x3D;&#x3D;CMake链接第三方库&#x3D;&#x3D; - VSCode</strong> </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(CMakeFind3nd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(main main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. find_package</span></span><br><span class="line"><span class="keyword">find_package</span>(VTK REQUIRED)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(main VTK)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. pkg_config (MacOS)</span></span><br><span class="line"><span class="keyword">find_package</span>(PkgConfig REQUIRED)</span><br><span class="line">pkg_check_modules(VTK vtk REQUIRED IMPORTED_TARGET)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(main PRIVATE PkgConfig::VTK)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. submodule (Git)</span></span><br><span class="line"><span class="comment"># First clone 3nd Lib</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(VTK)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(main VTK)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. </span></span><br></pre></td></tr></table></figure><h2 id="1-3-编译"><a href="#1-3-编译" class="headerlink" title="1.3 编译"></a>1.3 编译</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake ..  <span class="comment"># cmake .. -G &quot;Unix Makefiles&quot;</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line">rm -r build</span><br></pre></td></tr></table></figure><h2 id="1-4-Cmake"><a href="#1-4-Cmake" class="headerlink" title="1.4 Cmake"></a>1.4 Cmake</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_COMPILER <span class="string">&quot;g++&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;-std=c++11 -O3&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE <span class="string">&quot;Debug&quot;</span>) <span class="comment"># Debug Release</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)<span class="comment"># 可执行文件位置 命令行输入：cmake --build .</span></span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)<span class="comment"># 生成库文件位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(cmaketest)</span><br><span class="line"><span class="keyword">add_executable</span>(cmaketest main.cpp teacher.cpp student.cpp) </span><br></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>(cmaketest)</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_COMPILER <span class="string">&quot;g++&quot;</span>)</span><br><span class="line"><span class="keyword">set</span>(CMAKE_CXX_FLAGS <span class="string">&quot;-std=c++11 -O3&quot;</span>)  <span class="comment"># -O0 不优化     -march=native:native 自检测CPU</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE <span class="string">&quot;Debug&quot;</span>) <span class="comment"># Debug Release</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/bin)<span class="comment"># 可执行文件位置</span></span><br><span class="line"><span class="keyword">set</span>(LIBRARY_OUTPUT_PATH <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)<span class="comment"># 生成库文件位置</span></span><br><span class="line"><span class="keyword">set</span>(CMAKE_INSTALL_PREFIX &lt;install_path&gt;)<span class="comment">#在CMakeLists.txt中指定安装位置</span></span><br><span class="line"><span class="comment"># cmake -DCMAKE_INSTALL_PREFIX=/usr .. #在编译时指定安装位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LINK_DIRECTORIES</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/lib)<span class="comment">#把目录设为链接目录</span></span><br><span class="line"><span class="keyword">INCLUDE_DIRECTORIES</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>)<span class="comment">#设定头文件目录</span></span><br><span class="line"><span class="keyword">ADD_SUBDIRECTORY</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src)<span class="comment">#增加源文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用第三方库的三步：</span></span><br><span class="line"><span class="keyword">find_package</span>(OpenCV REQUIRED)<span class="comment">#添加依赖，寻找库文件信息</span></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;OpenCV_INCLUDE_DIRS&#125;</span>)<span class="comment">#寻找头文件</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(<span class="variable">$&#123;OpenCV_LIBRARIES&#125;</span>)<span class="comment">#需要链接的库文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LINK_DIRECTORIES</span>()<span class="comment">#去哪里找库文件（.so/.lib/.ddl等）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(cmaketest main.cpp teacher.cpp student.cpp) </span><br><span class="line"><span class="comment"># teacher.h student.h</span></span><br><span class="line"><span class="comment"># cmake .. -G &quot;Unix Makefiles&quot;</span></span><br><span class="line"><span class="comment"># rm -r filename</span></span><br><span class="line"><span class="comment"># message 打印信息（echo/printf）</span></span><br><span class="line"><span class="comment"># PROJECT_SOURCE_DIR 根目录 也是CMakeLists.txt的绝对目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">########################</span></span><br><span class="line"><span class="keyword">add_library</span>()</span><br><span class="line"><span class="keyword">add_library</span>(hello lib HelLo SLAM.cpp ) <span class="comment">#构建静态库生成静态库.a&quot;文件</span></span><br><span class="line"><span class="keyword">add_library</span>(hello_shared SHARED LibHelloSLAM.cpp)<span class="comment">#构建共享库生成共享库&quot;.so&quot;文件</span></span><br><span class="line"><span class="keyword">add_library</span>(&lt;name&gt;[STATIC|SHARED MODULE] [EXCLUDE FROM ALL] source l[source <span class="number">2</span>.])</span><br><span class="line">&lt;name&gt; <span class="comment">#生成库的名字， 直接写名字不加lib， 会自动加上前缀。</span></span><br><span class="line">SHARED <span class="comment">#动态库</span></span><br><span class="line">STATIC <span class="comment">#静态库</span></span><br><span class="line"><span class="keyword">SET</span>(LIB HELLO_SRC hello.c) <span class="keyword">ADD_LIBRARY</span>(hello SHARED<span class="variable">$&#123;LIB HELLO_SRC&#125;</span> )</span><br><span class="line"><span class="keyword">ADD_LIBRARY</span>(hello_static STATIC<span class="variable">$&#123;LIB HELLO_SRC&#125;</span> )</span><br><span class="line"><span class="comment">#一般我们使用的静态库/动态库只是后缀名不同而已， 上面是构建动态库库lib hello.so与静态库lib hello static.a的写法。</span></span><br></pre></td></tr></table></figure><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt-cache search 软件包name <span class="comment">#查找软件包</span></span><br><span class="line">sudo-cache search 软件包name<span class="comment">#安装</span></span><br><span class="line">pkg-config --cflags 软件包name<span class="comment">#查找软件包头文件路径</span></span><br><span class="line">pkg-config --libs 软件包name<span class="comment">#查找软件包库文件路径</span></span><br></pre></td></tr></table></figure><h2 id="1-5-CMake安装第三方库"><a href="#1-5-CMake安装第三方库" class="headerlink" title="1.5 CMake安装第三方库"></a>1.5 CMake安装第三方库</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.10</span>)</span><br><span class="line"><span class="keyword">project</span>(CMakeFind3nd)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(main main.cpp)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. find_package</span></span><br><span class="line"><span class="keyword">find_package</span>(VTK REQUIRED)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(main VTK)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. pkg_config (MacOS)</span></span><br><span class="line"><span class="keyword">find_package</span>(PkgConfig REQUIRED)</span><br><span class="line">pkg_check_modules(VTK vtk REQUIRED IMPORTED_TARGET)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(main PRIVATE PkgConfig::VTK)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. submodule (Git)</span></span><br><span class="line"><span class="comment"># First clone 3nd Lib</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(VTK)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(main VTK)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-1-重要指令及常用变量&quot;&gt;&lt;a href=&quot;#1-1-重要指令及常用变量&quot; class=&quot;headerlink&quot; title=&quot;1.1 重要指令及常用变量&quot;&gt;&lt;/a&gt;1.1 重要指令及常用变量&lt;/h2&gt;&lt;h3 id=&quot;1-1-1-重要指令&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hexo主题设置</title>
    <link href="https://example.com/2024/03/06/Hexo%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/"/>
    <id>https://example.com/2024/03/06/Hexo%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/</id>
    <published>2024-03-06T06:48:57.000Z</published>
    <updated>2024-03-06T07:11:11.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo配置主题"><a href="#Hexo配置主题" class="headerlink" title="Hexo配置主题"></a>Hexo配置主题</h1><h2 id="1-基础配置"><a href="#1-基础配置" class="headerlink" title="1.基础配置"></a>1.基础配置</h2><p>Hexo官方主题网站：<a href="https://hexo.io/themes/">Themes | Hexo</a> </p><ol><li><p>选择主题，并点击进入github页面</p></li><li><p>阅读README</p></li><li><p>复制下载命令</p></li><li><p>在根目录下的git窗口运行下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Shen-Yu/hexo-theme-ayer.git themes/ayer</span><br></pre></td></tr></table></figure></li><li><p>在根目录下 _config.yml 中更改主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">## theme: landscape</span><br><span class="line">theme: anzhiyu</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-深度配置"><a href="#2-深度配置" class="headerlink" title="2.深度配置"></a>2.深度配置</h2><h3 id="anzhiyu"><a href="#anzhiyu" class="headerlink" title="anzhiyu"></a>anzhiyu</h3><p>安知鱼官网：<a href="https://docs.anheyu.com/">安知鱼主题官方文档 (anheyu.com)</a> </p><h4 id="①-安装主题"><a href="#①-安装主题" class="headerlink" title="① 安装主题"></a>① 安装主题</h4><ol><li><p>下载主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure></li><li><p>应用主题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: anzhiyu</span><br></pre></td></tr></table></figure></li><li><p>安装pug和stylus渲染插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure></li><li><p>注意删掉 package.json 中的多余依赖：”hexo-renderer-jade”: “^0.5.0”,</p></li><li><p>启动Hexo</p></li></ol><h4 id="②-页面配置"><a href="#②-页面配置" class="headerlink" title="② 页面配置"></a>② 页面配置</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hexo配置主题&quot;&gt;&lt;a href=&quot;#Hexo配置主题&quot; class=&quot;headerlink&quot; title=&quot;Hexo配置主题&quot;&gt;&lt;/a&gt;Hexo配置主题&lt;/h1&gt;&lt;h2 id=&quot;1-基础配置&quot;&gt;&lt;a href=&quot;#1-基础配置&quot; class=&quot;headerli</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人网站</title>
    <link href="https://example.com/2024/03/06/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    <id>https://example.com/2024/03/06/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</id>
    <published>2024-03-06T04:33:51.000Z</published>
    <updated>2024-03-06T04:34:29.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-Github搭建个人网站"><a href="#Hexo-Github搭建个人网站" class="headerlink" title="Hexo+Github搭建个人网站"></a>Hexo+Github搭建个人网站</h1><h2 id="1-搭建git和nodejs环境"><a href="#1-搭建git和nodejs环境" class="headerlink" title="1.搭建git和nodejs环境"></a>1.搭建git和nodejs环境</h2><p>下载git：<a href="https://git-scm.com/">Git (git-scm.com)</a></p><p>初次使用git需要设置用户信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config —global user.name “your_name”</span><br><span class="line">$ git config —global user.email your_email</span><br></pre></td></tr></table></figure><p>生成SSH Key公钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C “your_github_email”</span><br><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>配置github中的公钥：</p><ul><li>Step1:点击头像</li><li>Step2:选择Settings</li><li>Step3:选择侧边栏的SSH and GPG keys</li><li>Step4:右上角点击New SSH key按钮</li><li>step5:输入公钥名称和复制的SSH公钥</li></ul><p>下载nodejs：<a href="https://nodejs.org/en">Node.js (nodejs.org)</a></p><p>检查是否安装成功，打开shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git -v</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="2-注册github账号并创建github-pages"><a href="#2-注册github账号并创建github-pages" class="headerlink" title="2.注册github账号并创建github pages"></a>2.注册github账号并创建github pages</h2><p>创建github pages注意：</p><ul><li>Repository name格式为：github账号名称 + .github.io</li><li>权限设置为：Public</li><li>可以勾选Initialize this repository with a README选项</li></ul><h2 id="3-安装并配置Hexo"><a href="#3-安装并配置Hexo" class="headerlink" title="3.安装并配置Hexo"></a>3.安装并配置Hexo</h2><p>在本地创建一个文件，比如命名为blog，即根目录，然后打开git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ cd blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>在git中安装插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git —save</span><br></pre></td></tr></table></figure><p>打开根站点文件夹下的_config.yml博客配置文件，在deployment配置项下设置如下参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo:git@github.com:yourname/yourname.github.io.git</span><br><span class="line">    branch:master</span><br></pre></td></tr></table></figure><h2 id="4-Hexo文件夹说明"><a href="#4-Hexo文件夹说明" class="headerlink" title="4.Hexo文件夹说明"></a>4.Hexo文件夹说明</h2><h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p><strong>_config.yml是整个博客的配置文件</strong>，至于每项配置参数可以**<a href="https://link.segmentfault.com/?enc=9UUSs1UZzpqVhqhEFMVvHA==.GHEi8GVrS0FUetnuJfVSmrtbUsGMOYqORvni85WlgyYbtvLD+oo3o+Pzef353pCD">Hexo官网文档</a>**有详细的介绍。</p><h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a><strong>scaffolds</strong></h4><p><em><strong>scaffolds</strong></em>是模板文件夹，当创建新的文章时，Hexo会根据scaffold里的不同模板来建立文件。什么意思呢？当使用Hexo新建一篇文章时使用的命令是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;    </span><br></pre></td></tr></table></figure><p>Hexo模板文章发布：由此可见其对应的保存路径关系如下：</p><table><thead><tr><th align="center">布局</th><th align="center">路径</th></tr></thead><tbody><tr><td align="center">post</td><td align="center">source&#x2F;_post</td></tr><tr><td align="center">page</td><td align="center">source&#x2F;</td></tr><tr><td align="center">draft</td><td align="center">source&#x2F;_draft</td></tr><tr><td align="center">自定义</td><td align="center">source&#x2F;_post</td></tr></tbody></table><p>关于模板及文章发布相关的详细知识点建议您参考**<a href="https://link.segmentfault.com/?enc=tvm2QmSqne/YABYYZf0ygQ==.Qw+VIfRzi5YQdMc1vmaAXOwkatMLfV3055BpLdtVa6zeCe/LW6cO7VchUCnwVQEp">官网文档</a>**。</p><h4 id="source"><a href="#source" class="headerlink" title="source"></a><strong>source</strong></h4><p><strong>source</strong>资源文件夹，是存放用户资源的地方。除post文件夹除外，<strong>开头以_（下划线）命名的文件&#x2F;文件夹或隐藏文件都会在generate时被忽略</strong>。<strong>Markdown和HTML文件夹会被解析到public文件夹下，其它文件格式的文件会被直接拷贝过去。</strong></p><h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p><strong>themes</strong>是主题文件夹。Hexo会根据设置的主题来生成静态的页面，刚才说到**使用Hexo init<folder><strong>生成的初始化站点的主题可能并不是你预估的样子。Hexo提供了丰富的站点主题供你选择，现在先去官网提供的</strong><a href="https://link.segmentfault.com/?enc=8zGCz+50MfucUvFYysCtqQ==.1tpuS7GWY0h8wF1wU1dchF2WuE81LzcIc8/dBTgAQZI=">主题页面</a>**选取一个你喜欢的主题，下一章我们会讲解如何更换主题。</p><h4 id="修改默认主题"><a href="#修改默认主题" class="headerlink" title="修改默认主题"></a>修改默认主题</h4><p>选择了一个喜欢的主题后，就可以更换默认主题。一般的话这些主题文件都会放在GitHub上，首先需要在博客<strong>根配置文件_config.yml</strong>中将theme字段下的主题更换为你选择的主题，比如此博客的主题就是**<a href="https://link.segmentfault.com/?enc=d6AcBImW/c59BMSyNNr2pQ==.w/Hk03n/yFOZEj7DlFx3kiWAbe9tKHdfchQLHCUIztFr93kw3jelGhbNMCh4hwxt">archer</a><strong>。打开主题对应的GitHub页面，</strong>强烈建议首先阅读Readme<strong>。找到对应的clone地址后，</strong>将博客主题使用git clone保存到themes文件夹下**。比如以next主题为例进行如下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> your-hexo-site</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure><p>此时执行Hexo命令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>本地打开后博客后，发现已经将博客的主题更换成next主题了。</p><h2 id="创建过程中的问题"><a href="#创建过程中的问题" class="headerlink" title="#创建过程中的问题"></a>#创建过程中的问题</h2><ol><li>配置hexo博客时报错TypeError: Cannot read properties of null (reading ‘utcOffset‘)</li></ol><p>解决方案：重新设置timezone，将#Site下的timezone改为 Asia&#x2F;Harbin或Asia&#x2F;Shanghai或Asia&#x2F;Chongqing或Asia&#x2F;Urumqi或Asia&#x2F;Kashgar后保存便可重新上传博客。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Hexo-Github搭建个人网站&quot;&gt;&lt;a href=&quot;#Hexo-Github搭建个人网站&quot; class=&quot;headerlink&quot; title=&quot;Hexo+Github搭建个人网站&quot;&gt;&lt;/a&gt;Hexo+Github搭建个人网站&lt;/h1&gt;&lt;h2 id=&quot;1-搭建g</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>paper</title>
    <link href="https://example.com/2024/03/06/paper/"/>
    <id>https://example.com/2024/03/06/paper/</id>
    <published>2024-03-06T04:09:11.000Z</published>
    <updated>2024-03-06T04:09:11.234Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://example.com/2024/03/05/hello-world/"/>
    <id>https://example.com/2024/03/05/hello-world/</id>
    <published>2024-03-05T08:42:17.836Z</published>
    <updated>2024-03-06T04:05:54.725Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo-豪</p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hexo-豪&lt;/p&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documen</summary>
      
    
    
    
    
  </entry>
  
</feed>
